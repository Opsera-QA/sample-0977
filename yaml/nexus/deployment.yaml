apiVersion: v1
kind: Namespace
metadata:
  name: testargoapp
  
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyI4MDgzLW5leHVzLW5laTNtb2V3LmxkYXBvd25lci5vcHNlcmEuaW8iOnsidXNlcm5hbWUiOiJhZG1pbiIsInBhc3N3b3JkIjoiR2hta2R3VE9PRiIsImVtYWlsIjoibmF3YXpAb3BzZXJhLmlvIiwiYXV0aCI6IllXUnRhVzQ2UjJodGEyUjNWRTlQUmc9PSJ9fX0=
kind: Secret
metadata:
  creationTimestamp: null
  name: docker-nexus
  namespace: testargoapp
type: kubernetes.io/dockerconfigjson
  
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-app
  namespace: testargoapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      imagePullSecrets:
        - name: docker-nexus
      containers:
        - name: back-end
          image: ngnix
          imagePullPolicy: Always
          ports:
            - containerPort: 8072
          env:
          - name: DOCKER_ENV
            value: "kubernetes"

---
#Service
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: argo-app
  name: argo-app
  namespace: testargoapp
spec:
  ports:
  - name: http
    port: 8072
    protocol: TCP
    targetPort: http
  selector:
    app: web
  sessionAffinity: None
  type: NodePort

---
# Ingress
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
  labels:
    app.kubernetes.io/name: argo-app
  name: argo-app
  namespace: testargoapp
spec:
  rules:
  - host: argocd2.nawaz-demo.opsera.io
    http:
      paths:
      - backend:
          serviceName: argo-app
          servicePort: 8072
        path: /
---
